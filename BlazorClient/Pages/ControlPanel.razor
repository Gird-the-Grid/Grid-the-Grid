@page "/control_panel"
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using BlazorClient.Model.Entities
@using BlazorClient.Model.Responses
@using Newtonsoft.Json
@inject HttpClient Http
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavigationManager Nav

<div class="text">
    <h1 class="h1-title"> Welcome to Grid the Grid</h1><br />
    @if (!sessionStorage.GetItem<bool>("logged"))
    {
        <h2 class="h1-title"> TODO: redirect on register or login </h2>
    }
    <p>@companyConfiguration</p>
    <p>@gridParameters</p>
</div>
<br />

@if (sessionStorage.GetItem<bool>("logged"))
{
    <div class="flex-container" style="margin: 0 auto; display:flex; justify-content:center; width:50%">
        <EditForm Model="@companyModel" OnValidSubmit="@PostCompanyConfiguration">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="Company Name" @bind-Value="companyModel.CompanyName" type="text" class="form-control" placeholder="Company Name" required />
            <br />
            <InputText id="Company Identification Number" @bind-Value="companyModel.CompanyIdentificationNumber" type="text" class="form-control" placeholder="CIN" required />
            <br />
            <InputText id="Country" @bind-Value="companyModel.Country" type="text" class="form-control" placeholder="Country" required />
            <br />
            <InputNumber id="Tax Rates" @bind-Value="companyModel.TaxRates" class="form-control" placeholder="0.01" required />
            <br />
            <button class="custom-button" type="submit">Submit</button>
        </EditForm>
    </div>

    <div class="flex-container" style="margin: 0 auto; display:flex; justify-content:center; width:50%">
        <EditForm Model="@gridModelTemplate" OnValidSubmit="@PostGridParameters">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h3>Number of grid vertexes:</h3>
            <InputNumber id="Number of clients" @bind-Value="gridModelTemplate.Vertexes" class="form-control" placeholder="" required />
            <br />
            <h3>Number of grid edges:</h3>
            <InputNumber id="Grid connections" @bind-Value="gridModelTemplate.Edges" class="form-control" placeholder="TODO: validate to be 0 < x * (x - 1) / 4" required />
            <br />
            <button class="custom-button" type="submit">Submit</button>
        </EditForm>
    </div>
}

@code {
    private string companyConfiguration;

    private string gridParameters;

    private CompanyModel companyModel = new CompanyModel();

    private GridModel gridModel = new GridModel();

    private GridModelTemplate gridModelTemplate = new GridModelTemplate();

    protected override async void OnInitialized()
    {
        initCompanyConfiguration(); //do we need to await this or not?
        initGridParameters(); //same
    }
    
    private async void initCompanyConfiguration(bool forceGet = false)
    {
        companyConfiguration = sessionStorage.GetItem<string>("companyConfiguration");
        if (companyConfiguration == null || forceGet)
        {
            var request = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("http://localhost:49429/control_panel" + "/configuration?userId=" + sessionStorage.GetItem<string>("userId")),
            };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
            var response = await Http.SendAsync(request);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            var iRes = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
            if (!iRes.Success)
            {
                // ERROR
                return;
            }
            var mRes = JsonConvert.DeserializeObject<MessageResponse>(responseBody);
            sessionStorage.SetItem<string>("companyConfiguration", mRes.Message);
            companyConfiguration = mRes.Message;
            await InvokeAsync(() => StateHasChanged());
        }
        companyModel = JsonConvert.DeserializeObject<CompanyModel>(companyConfiguration);

    }

    private async void initGridParameters(bool forceGet = false)
    {
        gridParameters = sessionStorage.GetItem<string>("gridParameters");
        if (gridParameters == null || forceGet)
        {
            var request = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("http://localhost:49429/control_panel" + "/grid?userId=" + sessionStorage.GetItem<string>("userId")),
            };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
            var response = await Http.SendAsync(request);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            var iRes = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
            if (!iRes.Success)
            {
                // ERROR
                return;
            }
            var mRes = JsonConvert.DeserializeObject<MessageResponse>(responseBody);
            sessionStorage.SetItem<string>("gridParameters", mRes.Message);
            gridParameters = mRes.Message;
            await InvokeAsync(() => StateHasChanged());
        }
        gridModel = JsonConvert.DeserializeObject<GridModel>(gridParameters);
        gridModelTemplate.Vertexes = 10;
        gridModelTemplate.Id = gridModel.Id;
        gridModelTemplate.Edges = 10;
        gridModelTemplate.OwnerId = gridModel.OwnerId;
        //TODO: here we would need to enter GridModel.Graph, deserialize this in a AdjacencyGraph<string, Edge<string>> graph and get graph.VertexCount and graph.EdgesCount
    }

    private string response;

    private async Task PostCompanyConfiguration()
    {
        var method = companyConfiguration == null ? "POST" : "PUT";
        var request = new HttpRequestMessage()
        {
            Method = new HttpMethod(method),
            RequestUri = new Uri("http://localhost:49429/control_panel" + "/configuration"),
            Content = JsonContent.Create(companyModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
        var response = await Http.SendAsync(request);
        var responseStatusCode = response.StatusCode;

        var responseBody = await response.Content.ReadAsStringAsync();

        Console.WriteLine(responseBody);

        initCompanyConfiguration(true);
    }

    private async Task PostGridParameters()
    {
        var method = gridParameters == null ? "POST" : "PUT";
        var request = new HttpRequestMessage()
        {
            Method = new HttpMethod(method),
            RequestUri = new Uri("http://localhost:49429/control_panel" + "/grid"),
            Content = JsonContent.Create(gridModelTemplate)
        };
        Console.WriteLine(JsonConvert.SerializeObject(gridModelTemplate));
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
        var response = await Http.SendAsync(request);
        var responseStatusCode = response.StatusCode;

        var responseBody = await response.Content.ReadAsStringAsync();

        Console.WriteLine(responseBody);

        initGridParameters(true);
    }
}
