@page "/register"
@inject HttpClient Http
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

<div class="text">
    <h1 class="h1-title"> Welcome to Grid the Grid</h1><br />
    @if (error)
    {
        <h1 class="h1-title"> An error has occurred, please try again later!</h1>
    }
    @if (!waiting)
    {    
        if (!registered)
        {
            <h2 class="h1-title"> Please, register so we can get started</h2>
        }
        else
        {
            <br/>
            <h2 class="h1-title"> Verify your email!</h2>
        }
    }
    else
    {
        <div class="spinner-border"  style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
</div>
<br />

@if (!registered && !waiting)
{
    <div class="flex-container" style="margin: 0 auto; display:flex; justify-content:center; width:50%">
        <EditForm Model="@registerModel" OnValidSubmit="@Send_registration">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="username" @bind-Value="registerModel.username" type="text" class="form-control" placeholder="Email" required />
            <br />
            <InputText id="password1" @bind-Value="registerModel.password1" type="password" class="form-control" placeholder="Password1" required />
            <br />
            <InputText id="password2" @bind-Value="registerModel.password2" type="password" class="form-control" placeholder="Password2" required />
            <br />
            <button class="custom-button" type="submit">Register</button>
        </EditForm>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        registered = false;
        error = false;
        waiting = false;
    }

    private BlazorClient.Model.RegisterModel registerModel = new BlazorClient.Model.RegisterModel();

    private string response;

    private bool registered;

    private bool error;

    private bool waiting;

    private class RegisterPacket
    {
        public string username { get; set; }
        public string password { get; set; }

        public RegisterPacket(string u, string p)
        {
            username = u;
            password = p;
        }
    }

    private async Task Send_registration()
    {
        RegisterPacket rp = new RegisterPacket(registerModel.username, registerModel.password1);

        waiting = true;
        //var r = await Http.PostAsJsonAsync("https://dsctraining.ancestormithril.repl.co/auth/register", lp); //other server
        var r = await Http.PostAsJsonAsync("http://localhost:49429/auth/register", new { email = rp.username, password = rp.password }); // our server

        response = await r.Content.ReadAsStringAsync();
        waiting = false;
        if (response.Contains("true"))
        {
            registered = true;
        }
        else
        {
            error = true;
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
