@page "/login"
@using BlazorClient.Model.Responses
@using Newtonsoft.Json;
@inject HttpClient Http
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavigationManager NavManager

<div class="text">
    <h1 class="h1-title"> Welcome to Grid the Grid</h1><br />
    @if (!sessionStorage.GetItem<bool>("logged"))
    {
        @if (sessionStorage.GetItem<string>("loginError") != null)
        {
            <h2 class="h1-title"> @writeFromSession("loginError")</h2>
        }
        <h2 class="h1-title"> Already a client? Login</h2>
    }
</div>
<br />

@if (!sessionStorage.GetItem<bool>("logged"))
{
    <div class="flex-container" style="margin: 0 auto; display:flex; justify-content:center; width:50%">
        <EditForm Model="@loginModel" OnValidSubmit="@Log_in">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="username" @bind-Value="loginModel.username" type="text" class="form-control" placeholder="Email" required />
            <br />
            <InputText id="password" @bind-Value="loginModel.password" type="password" class="form-control" placeholder="Password" required />
            <br />
            <button class="custom-button" type="submit">Login</button>
        </EditForm>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        if (sessionStorage.GetItem<bool>("logged"))
        {
            NavManager.NavigateTo("/");
        }
    }


    private string writeFromSession(string message)
    {
        var value = sessionStorage.GetItem<string>(message);
        return value;
    }

    private BlazorClient.Model.LoginModel loginModel = new BlazorClient.Model.LoginModel();

    private string response;

    private class LoginPacket
    {
        public string username { get; set; }
        public string password { get; set; }

        public LoginPacket(string u, string p)
        {
            username = u;
            password = p;
        }
    }



    private async Task Log_in()
    {
        LoginPacket lp = new LoginPacket(loginModel.username, loginModel.password);

        //var r = await Http.PostAsJsonAsync("https://dsctraining.ancestormithril.repl.co/auth/login", lp); // other server
        var r = await Http.PostAsJsonAsync("http://localhost:49429/auth/login", new { email = lp.username, password = lp.password }); // our server

        response = await r.Content.ReadAsStringAsync();

        var loginResponse = JsonConvert.DeserializeObject<BaseResponse>(response);

        if (loginResponse.Success)
        {
            sessionStorage.SetItem<bool>("logged", true);
            var successLoginResponse = JsonConvert.DeserializeObject<LoginResponse>(response);
            sessionStorage.SetItem<string>("token", successLoginResponse.Token);
            sessionStorage.SetItem<string>("userId", successLoginResponse.UserId);
            NavManager.NavigateTo("/");
        }
        else
        {
            //TODO: increment login error count, if too many block user or sth
            //TODO: add access error count on back-end and if too many password failed send mail with penetration report to user
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(response);
            sessionStorage.SetItem<bool>("logged", false);
            sessionStorage.SetItem<string>("loginError", errorResponse.Error);
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        //TODO: maybe  add redirect page when nothing else to do
    }
}
