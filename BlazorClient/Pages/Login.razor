@page "/login"
@using BlazorClient.Model.Responses
@using Newtonsoft.Json;
@inject HttpClient Http
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject NavMenuService navMenuService


<div class="text">
    <h1 class="h1-title"> Welcome to Grid the Grid</h1><br />
    @if (tooManyAttempts)
    {
        <h2 class=" h1-title"> Too many attempts were made in a short time. Come back later!</h2>
    }
    else
    {
        @if (!sessionStorage.GetItem<bool>("logged") && !waiting)
        {
            @if (sessionStorage.GetItem<string>("loginError") != null)
            {
                <h2 class="h1-title"> @writeFromSession("loginError")</h2>
            }
            <h2 class="h1-title"> Already a client? Login</h2>
        }
        @if (waiting)
        {
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
    }
</div>
<br />

@if (!sessionStorage.GetItem<bool>("logged") && !waiting && !tooManyAttempts)
{
    <div class="flex-container" style="margin: 0 auto; display:flex; justify-content:center; width:50%">
        <EditForm Model="@loginModel" OnValidSubmit="@Log_in">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="username" @bind-Value="loginModel.username" type="text" class="form-control" placeholder="Email" required />
            <br />
            <InputText id="password" @bind-Value="loginModel.password" type="password" class="form-control" placeholder="Password" required />
            <br />
            <button class="custom-button" type="submit">Login</button>
        </EditForm>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        if (sessionStorage.GetItem<bool>("logged"))
        {
            NavManager.NavigateTo("/");
        }
    }

    private string writeFromSession(string message)
    {
        var value = sessionStorage.GetItem<string>(message);
        return value;
    }

    private BlazorClient.Model.LoginModel loginModel = new BlazorClient.Model.LoginModel();

    private string response;

    private bool waiting;
    private bool tooManyAttempts;
    private DateTime start;
    private int LoggingAttempts = 0;

    private class LoginPacket
    {
        public string username { get; set; }
        public string password { get; set; }

        public LoginPacket(string u, string p)
        {
            username = u;
            password = p;
        }
    }

    private async Task Log_in()
    {
        LoginPacket lp = new LoginPacket(loginModel.username, loginModel.password);
        waiting = true;
        //var r = await Http.PostAsJsonAsync("https://dsctraining.ancestormithril.repl.co/auth/login", lp); // other server
        var r = await Http.PostAsJsonAsync("http://localhost:49429/auth/login", new { email = lp.username, password = lp.password }); // our server

        response = await r.Content.ReadAsStringAsync();
        waiting = false;
        Console.WriteLine(response);
        var loginResponse = JsonConvert.DeserializeObject<BaseResponse>(response);
        Console.WriteLine(loginResponse);

        if (loginResponse.Success)
        {
            sessionStorage.SetItem<bool>("logged", true);
            var successLoginResponse = JsonConvert.DeserializeObject<LoginResponse>(response);
            sessionStorage.SetItem<string>("token", successLoginResponse.Token);
            sessionStorage.SetItem<string>("userId", successLoginResponse.UserId);
            navMenuService.NotifyChanged();
            NavManager.NavigateTo("/");

        }
        else
        {
            if (LoggingAttempts == 0)
                start = DateTime.Now;
            LoggingAttempts++;
            if (LoggingAttempts > 10)
            { 
                if ((DateTime.Now - start).TotalMinutes <= 2)
                {
                    tooManyAttempts = true;
                    StateHasChanged();
                    await Task.Delay(50000);
                    tooManyAttempts = false;
                }
                LoggingAttempts = 0;
                start = DateTime.Now;
            }
            //TODO: add access error count on back-end and if too many password failed send mail with penetration report to user
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(response);
            sessionStorage.SetItem<bool>("logged", false);
            sessionStorage.SetItem<string>("loginError", errorResponse.Error);
        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        //TODO: maybe  add redirect page when nothing else to do
    }

}
