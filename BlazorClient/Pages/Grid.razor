@page "/grid"
@using BlazorClient.Model.Entities
@using System.Net.Http.Headers
@using BlazorClient.Model.Responses
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Timers
@inject HttpClient Http
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject NavMenuService navMenuService

@if (sessionStorage.GetItem<bool>("logged"))
{
    <div class="container">
        <div class="row" style="height: auto;">
            <div class="col">
                <table class="table table-dark table-hover">
                    <tr>
                        <td scope="col">Connection</td>
                        <td scope="col">Instant Power</td>
                        <td scope="col">Average Power</td>
                        <td scope="col">Max Power</td>
                    </tr>
                    @if (gridWeights != null)
                    {
                        @foreach (var conn in gridWeights)
                        {
                            <tr>
                                <td>@conn.Key</td>
                                @if (float.Parse(conn.Value.ToString()) > 0.85f * float.Parse(((string)edgeCost[conn.Key])))
                                {
                                    <td style="color: red;">@Math.Round(float.Parse(conn.Value.ToString()), 4)</td>
                                }
                                else
                                {
                                    <td>@Math.Round(float.Parse(conn.Value.ToString()), 4)</td>
                                }
                                <td>@Math.Round(float.Parse(averageEdgeCost[conn.Key].ToString()), 4).ToString()</td>
                                <td>@Math.Round(float.Parse(((string)edgeCost[conn.Key])), 4).ToString()</td>
                            </tr>
                        }
                    }
                </table>
            </div>
            <div class="col">
                <div id="mynetwork">
                    <div class="vis network-frame" style="position: relative; overflow: hidden; width: 100%; height: auto;">
                        <canvas style="position: relative; user-select: none; touch-action: pan-y; width: 100%; height: auto;">
                        </canvas>
                    </div>
                </div>
            </div>
        </div>
        @if (isAnalysisDone)
        {
            <table class="table table-dark table-hover">
                <thead>
                    <tr>
                        <td scope="col">Connection</td>
                        <td scope="col">Max capacity (kwh)</td>
                        <td scope="col">Instant power (kwh)</td>
                        <td scope="col">Tendency of growth</td>
                        <td scope="col">Maintenance cost</td>
                        <td scope="col">Profit</td>
                        <td scope="col">Taxes</td>
                        <td scope="col">Advice</td>
                    </tr>
                </thead>

                <tbody>
                    @if (staticGridWeights != null)
                    {
                        @foreach (var conn in staticGridWeights)
                        {
                            <tr>
                                <td>@conn.Key</td>
                                <td>@Math.Round(float.Parse(((string)edgeCost[conn.Key])), 1).ToString()</td>
                                @if (float.Parse(conn.Value.ToString()) > 0.85f * float.Parse(((string)edgeCost[conn.Key])))
                                {
                                    <td style="color: red;">@Math.Round(float.Parse(conn.Value.ToString()), 4)</td>
                                }
                                else
                                {
                                    <td>@Math.Round(float.Parse(conn.Value.ToString()), 1)</td>
                                }
                                @if (float.Parse(conn.Value.ToString()) > float.Parse(averageEdgeCost[conn.Key].ToString()))
                                {
                                    <td>Asc.</td>
                                }
                                else
                                {
                                    <td>Desc.</td>
                                }
                                <td>@Math.Round(energyCost * (float.Parse(((string)edgeCost[conn.Key])) * 0.1 + (float.Parse(((string)edgeCost[conn.Key])) * 0.1) * companyModel.TaxRates / 100), 1)</td>
                                <td>@Math.Round(float.Parse(conn.Value.ToString()) * energyCost, 1)</td>
                                <td>@Math.Round(float.Parse(conn.Value.ToString()) * energyCost * companyModel.TaxRates / 100, 1)</td>
                                <td>@GetAdvice(profit: float.Parse(conn.Value.ToString()) * energyCost, maxProfit: energyCost * float.Parse(((string)edgeCost[conn.Key])))</td>
                            </tr>
                        }
                    }
                </tbody>

            </table>
        }
        else
        {
            <br />
            <button style="font-size: 24px; display:flex; margin:auto; text-align: center; font-weight:bold;" @onclick="RequestAnalysis">
                Request Analysis
            </button>
            <br />
        }
    </div>
}

@code{
    Timer timer = new Timer();
    private double energyCost = 0;
    private bool isAnalysisDone = false;
    private Dictionary<string, double> gridWeights;
    private Dictionary<string, double> staticGridWeights;
    private Dictionary<string, double> averageEdgeCost;
    private JObject gridParameters;
    private JObject edgeCost;
    private CompanyModel companyModel = new CompanyModel();

    private int requestsMade;

    protected async override void OnInitialized()
    {
        @if (!sessionStorage.GetItem<bool>("logged"))
        {
            NavManager.NavigateTo("/login");
        }
        navMenuService.OnExit += StopTimer;
        await RefreshData();
        timer.Interval = 3000;
        timer.Elapsed += async (_, _) => await RefreshData();
        timer.Enabled = true;

        {
            var request = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("http://localhost:49429/control_panel/grid_dot?userId=" + sessionStorage.GetItem<string>("userId")),
            };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
            var response = await Http.SendAsync(request);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            var iRes = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
            if (!iRes.Success)
            {
                // ERROR
                return;
            }
            var mRes = JsonConvert.DeserializeObject<MessageResponse>(responseBody);

#pragma warning disable CS4014
            JS.InvokeAsync<string>("createGraph", mRes.Message);
#pragma warning restore CS4014
        }
    }

    private void StopTimer(object sender, EventArgs e)
    {
        timer.Enabled = false;
    }

    private async Task RequestAnalysis()
    {
        {
            var requestEnergyCost = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("http://localhost:49429/grid_manager/energy_cost")
            };
            requestEnergyCost.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
            var response = await Http.SendAsync(requestEnergyCost);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            var successResponse = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
            if (!successResponse.Success)
            {
                // ERROR
                return;
            }
            var messageResponse = JsonConvert.DeserializeObject<MessageResponse>(responseBody);
            energyCost = Math.Round(Convert.ToDouble(messageResponse.Message) / 1000000000000);
        }
        {
            if (gridWeights == null)
            {
                await RefreshData();
            }
            staticGridWeights = new Dictionary<string, double>(gridWeights);
        }
        {
            var companyConfiguration = sessionStorage.GetItem<string>("companyConfiguration");
            if (companyConfiguration == null)
            {
                var request = new HttpRequestMessage()
                {
                    Method = new HttpMethod("GET"),
                    RequestUri = new Uri("http://localhost:49429/control_panel" + "/configuration?userId=" + sessionStorage.GetItem<string>("userId")),
                };
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
                var response = await Http.SendAsync(request);
                var responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseBody);
                var successResponse = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
                if (!successResponse.Success)
                {
                    // ERROR
                    return;
                }
                var messageResponse = JsonConvert.DeserializeObject<MessageResponse>(responseBody);
                sessionStorage.SetItem<string>("companyConfiguration", messageResponse.Message);
                companyConfiguration = messageResponse.Message;
            }
            companyModel = JsonConvert.DeserializeObject<CompanyModel>(companyConfiguration);
        }
        isAnalysisDone = true;
    }

    private string GetAdvice(double profit, double maxProfit)
    {
        double maintenanceCost = Math.Round(maxProfit * 0.1 + (maxProfit * 0.1) * companyModel.TaxRates / 100);
        double taxes = Math.Round(profit * companyModel.TaxRates / 100);
        if (profit - maintenanceCost - taxes <= 0)
        {
            return $"This connection isn't profitable, you lose {Math.Round(Math.Abs(profit - maintenanceCost - taxes), 1)}$ per hour. Unless you expect a great influx of clients, you will lose funds in this area.";
        }
        if (profit - maintenanceCost - taxes <= profit * 0.25) //albitrary 25%
        {
            return $"This connection is oversized for the current load. Stop expanding here, reduce the maintenance costs and try to attract more customers in this area.";
        }
        if (profit > maxProfit * 0.8)
        {
            return $"The connection is working at {Math.Round(Math.Abs(100 * profit / maxProfit), 1)}% capacity. It is likely to require expanding in the near future.";
        }
        return "This connection is operating within normal parameters.";
    }

    private async Task RefreshData()
    {
        {
            var request = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("http://localhost:49429/grid_manager/current_weights?userId=" + sessionStorage.GetItem<string>("userId")),
            };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
            var response = await Http.SendAsync(request);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            var iRes = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
            if (!iRes.Success)
            {
                // ERROR
                return;
            }
            var mRes = JsonConvert.DeserializeObject<MessageResponse>(responseBody);
            gridWeights = JsonConvert.DeserializeObject<Dictionary<string, double>>(mRes.Message);
        }

        {
            if (averageEdgeCost == null)
            {
                averageEdgeCost = gridWeights;
                requestsMade = 0;
            }
            ++requestsMade;
            foreach (var connection in gridWeights)
            {
                if (!averageEdgeCost.ContainsKey(connection.Key))
                {
                    averageEdgeCost[connection.Key] = connection.Value;
                }
                averageEdgeCost[connection.Key] = (connection.Value * requestsMade + averageEdgeCost[connection.Key]) / (requestsMade + 1);
            }
        }

        {
            // eu, pt @first: ??? de ce faci acest request cand deja ai datele astea deja preluate? Nu se schimba niciodata, trebuie sa le iei numa o data
            var request = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("http://localhost:49429/control_panel" + "/grid?userId=" + sessionStorage.GetItem<string>("userId")),
            };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", sessionStorage.GetItem<string>("token"));
            var response = await Http.SendAsync(request);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            var iRes = JsonConvert.DeserializeObject<BaseResponse>(responseBody);
            if (!iRes.Success)
            {
                // ERROR
                return;
            }
            var mRes = JsonConvert.DeserializeObject<MessageResponse>(responseBody);
            sessionStorage.SetItem<string>("gridParameters", mRes.Message);
            Console.WriteLine(mRes.Message);
            gridParameters = (JObject)JsonConvert.DeserializeObject(mRes.Message);
            edgeCost = (JObject)JsonConvert.DeserializeObject((string)gridParameters["EdgeCost"]);
        }

        await InvokeAsync(() => StateHasChanged());
    }

    public static async Task SetInterval(Action action, TimeSpan timeout)
    {
        await Task.Delay(timeout).ConfigureAwait(false);

        action();
        //TODO: stop this set interval if not focussed on this page. Maybe use a timer instead?

#pragma warning disable CS4014
        SetInterval(action, timeout);
#pragma warning restore CS4014
    }
}
