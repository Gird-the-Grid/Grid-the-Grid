@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavMenuService navMenuService

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">GirdTheGrid</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @if (!sessionStorage.GetItem<bool>("logged"))
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Login
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="oi oi-person" aria-hidden="true"></span> Register
                </NavLink>
            </li>
        }
        else
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="control_panel">
                    <span class="oi oi-cog" aria-hidden="true"></span> Control Panel
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="grid">
                    <span class="oi oi-pulse" aria-hidden="true"></span> Grid
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" @onclick="Log_out">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    protected override void OnInitialized()
    {
        navMenuService.OnChanged += Reload;
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Log_out()
    {
        sessionStorage.SetItem<bool>("logged", false);
        if (sessionStorage.GetItem<string>("loginError") != null)
        {
            sessionStorage.RemoveItem("loginError");
        }
        if (sessionStorage.GetItem<string>("token") != null)
        {
            sessionStorage.RemoveItem("token");
        }
        if (sessionStorage.GetItem<string>("userId") != null)
        {
            sessionStorage.RemoveItem("userId");
        }
        if (sessionStorage.GetItem<string>("gridParameters") != null)
        {
            sessionStorage.RemoveItem("gridParameters");
        }
        if (sessionStorage.GetItem<string>("companyConfiguration") != null)
        {
            sessionStorage.RemoveItem("companyConfiguration");
        }
        navMenuService.StopTimer();
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void Reload(object sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }
}
